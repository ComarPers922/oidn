// ======================================================================== //
// Copyright 2009-2020 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "vec.ih"

#define K programCount

// DNNL memory object in nChwKc format with n=1
struct Memory
{
  uniform float* uniform ptr;
  uniform int C;
  uniform int H;
  uniform int W;
};

inline size_t getIndex(uniform Memory& mem, uniform int h, int w, uniform int c)
{
  return ((size_t)mem.H * (c/K) + h) * ((size_t)mem.W*K) + (size_t)w*K + (c%K);
}

inline float get1f(uniform Memory& mem, uniform int h, int w, uniform int c)
{
  return mem.ptr[getIndex(mem, h, w, c)];
}

inline void set1f(uniform Memory& mem, uniform int h, int w, uniform int c, float value)
{
  mem.ptr[getIndex(mem, h, w, c)] = value;
}

inline vec3f get3f(uniform Memory& mem, uniform int h, int w, uniform int c)
{
  return make_vec3f(get1f(mem, h, w, c),
                    get1f(mem, h, w, c+1),
                    get1f(mem, h, w, c+2));
}

inline void set3f(uniform Memory& mem, uniform int h, int w, uniform int c, const vec3f& value)
{
  set1f(mem, h, w, c,   value.x);
  set1f(mem, h, w, c+1, value.y);
  set1f(mem, h, w, c+2, value.z);
}
