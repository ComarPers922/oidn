## Copyright 2009-2020 Intel Corporation
## SPDX-License-Identifier: Apache-2.0

stages:
  - build
  - check_symbols
  - sign
  - package
  - scan_source

## -----------------------------------------------------------------------------
## Linux
## -----------------------------------------------------------------------------
 
.linux-base:
  tags:        [ docker ]
  artifacts:     
    untracked: true
    name:      "$CI_JOB_NAME"
    when:      always
    expire_in: 1d
  variables: &linux-base
    GIT_SUBMODULE_STRATEGY: recursive
    OIDN_ROOT_DIR:          "$CI_PROJECT_DIR"

.linux-build:
  stage:      build
  extends:    [ .linux-base ]
  only:       [ pushes, schedules, web ]
  script:     "scripts/linux_build.sh"

.linux-check-symbols:
  stage:      check_symbols
  extends:    [ .linux-base ]
  only:       [ schedules, web ]
  script:     "scripts/linux_check_symbols.sh"

.linux-package:
  stage:      package
  extends:    [ .linux-base ]
  only:       [ schedules, web ]
  script:     "scripts/linux_package.sh"

## -----------------------------------------------------------------------------

.linux-clang-build:
  extends:    [ .linux-build ]
  variables: 
    OIDN_C:   "clang"
    OIDN_CXX: "clang++"
    <<:       *linux-base

.linux-icc-build:
  extends:    [ .linux-build ]
  variables: 
    OIDN_C:   "$PATH_ICC_19_LINUX/icc"
    OIDN_CXX: "$PATH_ICC_19_LINUX/icpc"
    <<:       *linux-base

.linux-gcc-build:
  extends:    [ .linux-build ]
  variables: 
    OIDN_C:   "gcc"
    OIDN_CXX: "g++"
    <<:       *linux-base

## -----------------------------------------------------------------------------

.centos7:
  image:        openimagedenoise/build:centos7
  
centos7-icc-build:
  extends:      [ .centos7, .linux-icc-build ]

centos7-icc-check-symbols:
  extends:      [ .centos7, .linux-check-symbols ]
  needs: 
    - job:       centos7-icc-build
      artifacts: true

centos7-icc-package:
  extends:      [ .centos7, .linux-package ]
  needs: 
    - job:       centos7-icc-build
      artifacts: true

## -----------------------------------------------------------------------------

.ubuntu18.04:
  image:        openimagedenoise/build:ubuntu18.04

ubuntu18.04-gcc-build:
  extends:      [ .ubuntu18.04, .linux-gcc-build ]

ubuntu18.04-gcc-build-debug:
  extends:      [ ubuntu18.04-gcc-build ]
  variables: 
    OIDN_BUILD: "Debug"

ubuntu18.04-clang-build:
  extends:      [ .ubuntu18.04, .linux-clang-build ]

ubuntu18.04-kw-gcc-build:
  extends:      [ .ubuntu18.04, .linux-gcc-build ]
  script:       "scripts/klocwork_build.sh"


## -----------------------------------------------------------------------------
## macOS
## -----------------------------------------------------------------------------

.macos-base:
  tags:        [ osx ]
  artifacts:     
    untracked: true
    name:      "$CI_JOB_NAME"
    when:      always
    expire_in: 1d
  variables: &macos-base
    GIT_SUBMODULE_STRATEGY: recursive
    OIDN_ROOT_DIR:          "$CI_PROJECT_DIR"

.macos-build:
  stage:      build
  extends:    [ .macos-base ]
  only:       [ pushes, schedules, web ]
  script:     "scripts/macos_build.sh"

.macos-sign:
  stage:      sign
  extends:    [ .macos-base ]
  only:       [ schedules, web ]
  script:     "scripts/macos_sign.sh"

.macos-package:
  stage:      package
  extends:    [ .macos-base ]
  only:       [ schedules, web ]
  script:     "scripts/macos_package.sh"

## -----------------------------------------------------------------------------

.macos-clang-build:
  extends:    [ .macos-build ]
  variables: 
    OIDN_C:   "clang"
    OIDN_CXX: "clang++"
    <<:       *macos-base

.macos-icc-build:
  extends:    [ .macos-build ]
  variables: 
    OIDN_C:   "$PATH_ICC_19_APPLE/icc"
    OIDN_CXX: "$PATH_ICC_19_APPLE/icpc"
    <<:       *macos-base

## -----------------------------------------------------------------------------

macos-clang-build:
  extends:      [ .macos-clang-build ]

macos-icc-build:
  extends:      [ .macos-icc-build ]

macos-icc-sign:
  extends:      [ .macos-sign ]
  needs: 
    - job:       macos-icc-build
      artifacts: true

macos-icc-package:
  extends:      [ .macos-package ]
  needs: 
    - job:       macos-icc-sign
      artifacts: true

## -----------------------------------------------------------------------------
## Windows
## -----------------------------------------------------------------------------

.windows-base:
  artifacts:     
    untracked: true
    name:      "$CI_JOB_NAME"
    when:      always
    expire_in: 1d
  variables: &windows-base
    GIT_SUBMODULE_STRATEGY: recursive
    OIDN_ROOT_DIR:          "$CI_PROJECT_DIR"
    ErrorActionPreference:  stop

.windows-build:
  stage:      build
  extends:    [ .windows-base ]
  only:       [ pushes, schedules, web ]
  script:     
    - scripts\windows_build.ps1
    - if(!$?) { Exit $LASTEXITCODE }

.windows-sign:
  stage:      sign
  extends:    [ .windows-base ]
  only:       [ schedules, web ]
  script:     
    - scripts\windows_sign.ps1
    - if(!$?) { Exit $LASTEXITCODE }

.windows-package:
  stage:      package
  extends:    [ .windows-base ]
  only:       [ schedules, web ]
  script:     
    - scripts\windows_package.ps1
    - if(!$?) { Exit $LASTEXITCODE }

## -----------------------------------------------------------------------------

.windows-vs15-icc19:
  tags: [ win10, msvc15, icc19 ]
  variables:
    OIDN_GENERATOR: "Visual Studio 15 2017 Win64"
    OIDN_TOOLCHAIN: "Intel C++ Compiler 19.0"
    <<:             *windows-base

windows-vs15-icc19-build:
  extends:      [ .windows-build, .windows-vs15-icc19 ]

windows-vs15-icc19-sign:
  extends:      [ .windows-sign, .windows-vs15-icc19 ]
  needs: 
    - job:       windows-vs15-icc19-build
      artifacts: true

windows-vs15-icc19-package:
  extends:      [ .windows-package, .windows-vs15-icc19 ]
  needs: 
    - job:       windows-vs15-icc19-sign
      artifacts: true

## -----------------------------------------------------------------------------
## Protex
## -----------------------------------------------------------------------------

protex_scan:
  stage:    scan_source
  tags:     [ docker ]
  only:     [ schedules, web ]
  script:   "scripts/protex_scan.sh"
  image: amd64/openjdk:8
  dependencies: []
  # Will fail regularly, do not break nightlies because of that.
  allow_failure: true
  artifacts:
    paths:     [ "$CI_PROJECT_DIR/ip_protex.log" ]
    name:      "$CI_JOB_NAME"
    when:      always
    expire_in: 7d
